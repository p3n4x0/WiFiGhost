"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-collapse";
exports.ids = ["vendor-chunks/react-collapse"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-collapse/lib/Collapse.js":
/*!*****************************************************!*\
  !*** ./node_modules/react-collapse/lib/Collapse.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Collapse = void 0;\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    } else if (call !== void 0) {\n        throw new TypeError(\"Derived constructors may only return object or undefined\");\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar Collapse = /*#__PURE__*/ function(_React$Component) {\n    _inherits(Collapse, _React$Component);\n    var _super = _createSuper(Collapse);\n    function Collapse(props) {\n        var _this;\n        _classCallCheck(this, Collapse);\n        _this = _super.call(this, props);\n        _defineProperty(_assertThisInitialized(_this), \"timeout\", undefined);\n        _defineProperty(_assertThisInitialized(_this), \"container\", undefined);\n        _defineProperty(_assertThisInitialized(_this), \"content\", undefined);\n        _defineProperty(_assertThisInitialized(_this), \"onResize\", function() {\n            clearTimeout(_this.timeout);\n            if (!_this.container || !_this.content) {\n                return;\n            }\n            var _this$props = _this.props, isOpened = _this$props.isOpened, checkTimeout = _this$props.checkTimeout;\n            var containerHeight = Math.floor(_this.container.clientHeight);\n            var contentHeight = Math.floor(_this.content.clientHeight);\n            var isFullyOpened = isOpened && Math.abs(contentHeight - containerHeight) <= 1;\n            var isFullyClosed = !isOpened && Math.abs(containerHeight) <= 1;\n            if (isFullyOpened || isFullyClosed) {\n                _this.onRest({\n                    isFullyOpened: isFullyOpened,\n                    isFullyClosed: isFullyClosed,\n                    isOpened: isOpened,\n                    containerHeight: containerHeight,\n                    contentHeight: contentHeight\n                });\n            } else {\n                _this.onWork({\n                    isFullyOpened: isFullyOpened,\n                    isFullyClosed: isFullyClosed,\n                    isOpened: isOpened,\n                    containerHeight: containerHeight,\n                    contentHeight: contentHeight\n                });\n                _this.timeout = setTimeout(function() {\n                    return _this.onResize();\n                }, checkTimeout);\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onRest\", function(_ref) {\n            var isFullyOpened = _ref.isFullyOpened, isFullyClosed = _ref.isFullyClosed, isOpened = _ref.isOpened, containerHeight = _ref.containerHeight, contentHeight = _ref.contentHeight;\n            if (!_this.container || !_this.content) {\n                return;\n            }\n            var hasOpened = isOpened && _this.container.style.height === \"\".concat(contentHeight, \"px\");\n            var hasClosed = !isOpened && _this.container.style.height === \"0px\";\n            if (hasOpened || hasClosed) {\n                _this.container.style.overflow = isOpened ? \"initial\" : \"hidden\";\n                _this.container.style.height = isOpened ? \"auto\" : \"0px\";\n                var onRest = _this.props.onRest;\n                if (onRest) {\n                    onRest({\n                        isFullyOpened: isFullyOpened,\n                        isFullyClosed: isFullyClosed,\n                        isOpened: isOpened,\n                        containerHeight: containerHeight,\n                        contentHeight: contentHeight\n                    });\n                }\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onWork\", function(_ref2) {\n            var isFullyOpened = _ref2.isFullyOpened, isFullyClosed = _ref2.isFullyClosed, isOpened = _ref2.isOpened, containerHeight = _ref2.containerHeight, contentHeight = _ref2.contentHeight;\n            if (!_this.container || !_this.content) {\n                return;\n            }\n            var isOpenining = isOpened && _this.container.style.height === \"\".concat(contentHeight, \"px\");\n            var isClosing = !isOpened && _this.container.style.height === \"0px\";\n            if (isOpenining || isClosing) {\n                // No need to do any work\n                return;\n            }\n            _this.container.style.overflow = \"hidden\";\n            _this.container.style.height = isOpened ? \"\".concat(contentHeight, \"px\") : \"0px\";\n            var onWork = _this.props.onWork;\n            if (onWork) {\n                onWork({\n                    isFullyOpened: isFullyOpened,\n                    isFullyClosed: isFullyClosed,\n                    isOpened: isOpened,\n                    containerHeight: containerHeight,\n                    contentHeight: contentHeight\n                });\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onRefContainer\", function(container) {\n            _this.container = container;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onRefContent\", function(content) {\n            _this.content = content;\n        });\n        if (props.initialStyle) {\n            _this.initialStyle = props.initialStyle;\n        } else {\n            _this.initialStyle = props.isOpened ? {\n                height: \"auto\",\n                overflow: \"initial\"\n            } : {\n                height: \"0px\",\n                overflow: \"hidden\"\n            };\n        }\n        return _this;\n    }\n    _createClass(Collapse, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.onResize();\n            }\n        },\n        {\n            key: \"shouldComponentUpdate\",\n            value: function shouldComponentUpdate(nextProps) {\n                var _this$props2 = this.props, theme = _this$props2.theme, isOpened = _this$props2.isOpened, children = _this$props2.children;\n                return children !== nextProps.children || isOpened !== nextProps.isOpened || Object.keys(theme).some(function(c) {\n                    return theme[c] !== nextProps.theme[c];\n                });\n            }\n        },\n        {\n            key: \"getSnapshotBeforeUpdate\",\n            value: function getSnapshotBeforeUpdate() {\n                if (!this.container || !this.content) {\n                    return null;\n                }\n                if (this.container.style.height === \"auto\") {\n                    var contentHeight = this.content.clientHeight;\n                    this.container.style.height = \"\".concat(contentHeight, \"px\");\n                }\n                return null;\n            }\n        },\n        {\n            key: \"componentDidUpdate\",\n            value: function componentDidUpdate() {\n                this.onResize();\n            }\n        },\n        {\n            key: \"componentWillUnmount\",\n            value: function componentWillUnmount() {\n                clearTimeout(this.timeout);\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props3 = this.props, theme = _this$props3.theme, children = _this$props3.children, isOpened = _this$props3.isOpened;\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    ref: this.onRefContainer,\n                    className: theme.collapse,\n                    style: this.initialStyle,\n                    \"aria-hidden\": !isOpened\n                }, /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    ref: this.onRefContent,\n                    className: theme.content\n                }, children));\n            }\n        }\n    ]);\n    return Collapse;\n}(_react[\"default\"].Component);\nexports.Collapse = Collapse;\n_defineProperty(Collapse, \"defaultProps\", {\n    theme: {\n        collapse: \"ReactCollapse--collapse\",\n        content: \"ReactCollapse--content\"\n    },\n    initialStyle: undefined,\n    onRest: undefined,\n    onWork: undefined,\n    checkTimeout: 50\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-collapse/lib/Collapse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-collapse/lib/UnmountClosed.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-collapse/lib/UnmountClosed.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.UnmountClosed = void 0;\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _Collapse = __webpack_require__(/*! ./Collapse */ \"(ssr)/./node_modules/react-collapse/lib/Collapse.js\");\nvar _excluded = [\n    \"isOpened\"\n], _excluded2 = [\n    \"isOpened\"\n];\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    } else if (call !== void 0) {\n        throw new TypeError(\"Derived constructors may only return object or undefined\");\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar UnmountClosed = /*#__PURE__*/ function(_React$PureComponent) {\n    _inherits(UnmountClosed, _React$PureComponent);\n    var _super = _createSuper(UnmountClosed);\n    function UnmountClosed(props) {\n        var _this;\n        _classCallCheck(this, UnmountClosed);\n        _this = _super.call(this, props);\n        _defineProperty(_assertThisInitialized(_this), \"onWork\", function(_ref) {\n            var isOpened = _ref.isOpened, rest = _objectWithoutProperties(_ref, _excluded);\n            _this.setState({\n                isResting: false,\n                isOpened: isOpened\n            });\n            var onWork = _this.props.onWork;\n            if (onWork) {\n                onWork(_objectSpread({\n                    isOpened: isOpened\n                }, rest));\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onRest\", function(_ref2) {\n            var isOpened = _ref2.isOpened, rest = _objectWithoutProperties(_ref2, _excluded2);\n            _this.setState({\n                isResting: true,\n                isOpened: isOpened,\n                isInitialRender: false\n            });\n            var onRest = _this.props.onRest;\n            if (onRest) {\n                onRest(_objectSpread({\n                    isOpened: isOpened\n                }, rest));\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"getInitialStyle\", function() {\n            var _this$state = _this.state, isOpened = _this$state.isOpened, isInitialRender = _this$state.isInitialRender;\n            if (isInitialRender) {\n                return isOpened ? {\n                    height: \"auto\",\n                    overflow: \"initial\"\n                } : {\n                    height: \"0px\",\n                    overflow: \"hidden\"\n                };\n            }\n            return {\n                height: \"0px\",\n                overflow: \"hidden\"\n            };\n        });\n        _this.state = {\n            isResting: true,\n            isOpened: props.isOpened,\n            isInitialRender: true\n        };\n        return _this;\n    }\n    _createClass(UnmountClosed, [\n        {\n            key: \"componentDidUpdate\",\n            value: function componentDidUpdate(prevProps) {\n                var isOpened = this.props.isOpened;\n                if (prevProps.isOpened !== isOpened) {\n                    // eslint-disable-next-line react/no-did-update-set-state\n                    this.setState({\n                        isResting: false,\n                        isOpened: isOpened,\n                        isInitialRender: false\n                    });\n                }\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$state2 = this.state, isResting = _this$state2.isResting, isOpened = _this$state2.isOpened;\n                return isResting && !isOpened ? null : /*#__PURE__*/ _react[\"default\"].createElement(_Collapse.Collapse, _extends({}, this.props, {\n                    initialStyle: this.getInitialStyle(),\n                    onWork: this.onWork,\n                    onRest: this.onRest\n                }));\n            }\n        }\n    ]);\n    return UnmountClosed;\n}(_react[\"default\"].PureComponent);\nexports.UnmountClosed = UnmountClosed;\n_defineProperty(UnmountClosed, \"defaultProps\", {\n    onWork: undefined,\n    onRest: undefined\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-collapse/lib/UnmountClosed.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-collapse/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/react-collapse/lib/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar _require = __webpack_require__(/*! ./Collapse */ \"(ssr)/./node_modules/react-collapse/lib/Collapse.js\"), Collapse = _require.Collapse;\nvar _require2 = __webpack_require__(/*! ./UnmountClosed */ \"(ssr)/./node_modules/react-collapse/lib/UnmountClosed.js\"), UnmountClosed = _require2.UnmountClosed; // Default export\nmodule.exports = UnmountClosed; // Extra \"named exports\"\nUnmountClosed.Collapse = Collapse;\nUnmountClosed.UnmountClosed = UnmountClosed;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sbGFwc2UvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWIsSUFBSUEsV0FBV0MsbUJBQU9BLENBQUMsMEVBQ25CQyxXQUFXRixTQUFTRSxRQUFRO0FBRWhDLElBQUlDLFlBQVlGLG1CQUFPQSxDQUFDLG9GQUNwQkcsZ0JBQWdCRCxVQUFVQyxhQUFhLEVBQUUsaUJBQWlCO0FBRzlEQyxPQUFPQyxPQUFPLEdBQUdGLGVBQWUsd0JBQXdCO0FBRXhEQSxjQUFjRixRQUFRLEdBQUdBO0FBQ3pCRSxjQUFjQSxhQUFhLEdBQUdBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2lmaWdob3N0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbGxhcHNlL2xpYi9pbmRleC5qcz84YjdhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL0NvbGxhcHNlJyksXG4gICAgQ29sbGFwc2UgPSBfcmVxdWlyZS5Db2xsYXBzZTtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJy4vVW5tb3VudENsb3NlZCcpLFxuICAgIFVubW91bnRDbG9zZWQgPSBfcmVxdWlyZTIuVW5tb3VudENsb3NlZDsgLy8gRGVmYXVsdCBleHBvcnRcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFVubW91bnRDbG9zZWQ7IC8vIEV4dHJhIFwibmFtZWQgZXhwb3J0c1wiXG5cblVubW91bnRDbG9zZWQuQ29sbGFwc2UgPSBDb2xsYXBzZTtcblVubW91bnRDbG9zZWQuVW5tb3VudENsb3NlZCA9IFVubW91bnRDbG9zZWQ7Il0sIm5hbWVzIjpbIl9yZXF1aXJlIiwicmVxdWlyZSIsIkNvbGxhcHNlIiwiX3JlcXVpcmUyIiwiVW5tb3VudENsb3NlZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-collapse/lib/index.js\n");

/***/ })

};
;