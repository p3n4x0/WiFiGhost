import type { FC, ReactNode } from 'react';
import type { KeepTheme } from './KeepTheme';
/**
 * Represents the mode of the theme.
 * It can be 'light', 'dark', or undefined.
 */
export type Mode = string | undefined | 'light' | 'dark';
/**
 * Props for the ThemeContext component.
 */
interface ThemeContextProps {
    theme: KeepTheme;
    mode?: Mode;
    toggleMode?: () => void | null;
}
/**
 * Context for managing the theme in the application.
 */
export declare const ThemeContext: import("react").Context<ThemeContextProps>;
/**
 * Props for the ThemeProvider component.
 */
interface ThemeProviderProps {
    children: ReactNode;
    value: ThemeContextProps;
}
export declare const ThemeProvider: FC<ThemeProviderProps>;
export declare function useTheme(): ThemeContextProps;
/**
 * Custom hook that provides theme mode state and functions for toggling the theme mode.
 * @param usePreferences - Flag indicating whether to use user preferences for theme mode.
 * @returns A tuple containing the current theme mode, a function to set the theme mode, and a function to toggle the theme mode.
 */
export declare const useThemeMode: (usePreferences: boolean) => [Mode, React.Dispatch<React.SetStateAction<Mode>> | undefined, (() => void) | undefined];
export {};
