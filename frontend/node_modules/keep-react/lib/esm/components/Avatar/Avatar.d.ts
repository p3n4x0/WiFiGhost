/**
 * Renders an avatar component with optional image, shape, size, and status.
 * @param {AvatarProps} props - The props object containing optional alt text, bordered, children, img, shape, size, stacked, status, statusType, statusPosition, and totalNotification.
 * @returns {JSX.Element} - The rendered Avatar component.
 * @see https://react.keepdesign.io/docs/components/avatar
 */
import type { ComponentProps, FC, PropsWithChildren } from 'react';
import { KeepPositions, KeepSizes } from '../../Keep/KeepTheme';
export interface keepAvatarTheme {
    base: string;
    bordered: string;
    img: {
        off: string;
        on: string;
    };
    size: AvatarSizes;
    customStatusIcon: AvatarSizes;
    shape: {
        square: string;
        circle: string;
        rounded: AvatarSizes;
    };
    stacked: string;
    status: {
        away: string;
        busy: string;
        offline: string;
        online: string;
    };
    statusType: {
        type: AvatarStatusType;
        size: KeepAvatarStatusTypeSize;
        fontSize: KeepAvatarStatusFontSize;
    };
    statusPosition: {
        square: KeepAvatarStatusPositions;
        circle: KeepAvatarStatusPositions;
        rounded: KeepAvatarStatusPositions;
    };
    groupCounter: {
        base: string;
    };
    add: {
        base: string;
        iconSize: AvatarSizes;
    };
}
export interface AvatarSizes extends Pick<KeepSizes, 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl'> {
    [key: string]: string;
}
export interface AvatarStatusType extends Pick<KeepAvatarStatusType, 'dot' | 'notification'> {
    [key: string]: string;
}
export interface AvatarStatusPositions extends Pick<KeepPositions, 'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'> {
    [key: string]: string;
}
export interface KeepAvatarStatusType {
    dot: string;
    notification: string;
}
export interface KeepAvatarStatusTypeSize {
    dot: AvatarSizes;
    notification: AvatarSizes;
}
export interface StatusPositions {
    xs: AvatarStatusPositions;
    sm: AvatarStatusPositions;
    md: AvatarStatusPositions;
    lg: AvatarStatusPositions;
    xl: AvatarStatusPositions;
    '2xl': AvatarStatusPositions;
}
export interface KeepAvatarStatusPositions {
    dot: StatusPositions;
    notification: StatusPositions;
}
export interface KeepAvatarStatusFontSize {
    notification: AvatarSizes;
}
/**
 * Props for the Avatar component
 * @interface AvatarProps
 * @extends {PropsWithChildren<ComponentProps<'div'>>}
 */
export interface AvatarProps extends PropsWithChildren<ComponentProps<'div'>> {
    /**
     * Alternative text for the avatar image
     * @type string
     * @default ''
     */
    alt?: string;
    /**
     * Whether to show a border around the avatar
     * @type boolean
     * @default false
     */
    bordered?: boolean;
    /**
     * URL of the image to display as the avatar
     * @type string
     */
    img?: string;
    /**
     * Size of the avatar
     * @type keyof AvatarSizes
     * @default 'md'
     */
    size?: keyof AvatarSizes;
    /**
     * Shape of the avatar
     * @type ('circle' | 'rounded' | 'square')
     * @default 'square'
     */
    shape?: 'circle' | 'rounded' | 'square';
    /**
     * Whether to stack the avatar on top of other avatars
     * @type boolean
     * @default false
     */
    stacked?: boolean;
    /**
     * Status of the user associated with the avatar
     * @type ('away' | 'busy' | 'offline' | 'online')
     */
    status?: 'away' | 'busy' | 'offline' | 'online';
    /**
     * Type of status icon to display
     * @type keyof KeepAvatarStatusType
     * @default 'dot'
     */
    statusType?: keyof KeepAvatarStatusType;
    /**
     * Position of the status icon
     * @type keyof KeepPositions
     * @default 'top-left'
     */
    statusPosition?: keyof KeepPositions;
    /**
     * Number of notifications to display on the avatar
     * @type number
     */
    totalNotification?: number;
    /**
     * className to apply to the Avatar.
     * @type string
     */
    className?: string;
    /**
     * style to apply to the Avatar status.
     * @type string
     */
    statusStyle?: string;
}
export declare const Avatar: FC<AvatarProps> & {
    Group: FC<import("./AvatarGroup").AvatarGroupProps>;
    Counter: FC<import("./AvatarGroupCounter").AvatarGroupCounterProps>;
    Add: FC<import("./AvatarAdd").AvatarAddProps>;
};
