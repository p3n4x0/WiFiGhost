import type { ComponentProps, FC, PropsWithChildren } from 'react';
export interface keepPaginationTheme {
    paginateWithBorder: string;
    layout: {
        table: {
            base: string;
            span: string;
        };
    };
    pages: {
        base: string;
        previous: {
            base: string;
            icon: string;
            title: string;
            iconWithText: string;
            iconWithOutText: string;
        };
        next: {
            base: string;
            icon: string;
            title: string;
            iconWithText: string;
            iconWithOutText: string;
        };
        selector: {
            base: string;
            active: {
                base: string;
                circle: string;
                roundSquare: string;
            };
        };
        prevNextShape: {
            none: string;
            circle: string;
            round: string;
            roundSquare: string;
        };
    };
    goTo: {
        base: string;
        title: string;
        input: string;
        withBorder: string;
        goToShape: {
            none: string;
            circle: string;
            round: string;
            roundSquare: string;
        };
    };
}
export type PaginationProps = PropsWithChildren<Pagination>;
/**
 * Pagination component props.
 * @interface Pagination
 * @extends Omit<ComponentProps<'nav'>, 'className'>
 */
interface Pagination extends Omit<ComponentProps<'nav'>, 'className'> {
    /**
     * The current page number.
     */
    currentPage: number;
    /**
     * The shape of the previous/next buttons.
     * Possible values: 'circle', 'round', 'roundSquare', 'none'.
     */
    prevNextShape?: 'circle' | 'round' | 'roundSquare' | 'none';
    /**
     * The shape of the go-to page button.
     * Possible values: 'circle', 'round', 'roundSquare', 'none'.
     */
    goToShape?: 'circle' | 'round' | 'roundSquare' | 'none';
    /**
     * The shape of the active current page indicator.
     * Possible values: 'circle', 'roundSquare'.
     */
    activeCurrentPageShape?: 'circle' | 'roundSquare';
    /**
     * Callback function triggered when the page is changed.
     * @param page - The new page number.
     */
    onPageChange: (page: number) => void;
    /**
     * Determines whether to display icons with text.
     */
    iconWithText?: boolean;
    /**
     * Determines whether to display icons without text.
     */
    iconWithOutText?: boolean;
    /**
     * Determines whether to paginate with borders.
     */
    paginateWithBorder?: boolean;
    /**
     * Determines whether to show the go-to page button.
     */
    showGoToPaginate?: boolean;
    /**
     * The total number of pages.
     */
    totalPages: number;
    /**
     * The style for the next button.
     */
    nextBtnStyle?: string;
    /**
     * The style for the previous button.
     */
    previousBtnStyle?: string;
    /**
     * The style for the page.
     */
    pageStyle?: string;
    /**
     * The additional class name for the component.
     */
    className?: string;
}
export declare const Pagination: FC<PaginationProps>;
export {};
