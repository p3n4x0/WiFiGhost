import type { ComponentProps, PropsWithChildren } from 'react';
import type { TabItemProps } from './TabItem';
import { KeepBoolean, KeepColors } from '../../Keep/KeepTheme';
export interface keepTabTheme {
    base: string;
    tabList: {
        base: string;
        styles: TabStyles;
        borderPosition: {
            top: string;
            bottom: string;
        };
        tabItem: {
            base: string;
            styles: TabStyleItem<TabStyles>;
            icon: {
                left: string;
                right: string;
            };
            notification: {
                base: string;
                type: {
                    number: string;
                    text: string;
                };
                notificationColor: TabNotificationColors;
            };
        };
    };
    tabPanel: string;
}
export interface TabStyles {
    default: string;
    underline: string;
    pills: string;
    fullWidth: string;
}
export interface BorderPosition {
    top: string;
    bottom: string;
}
export interface TabStyleItemProps {
    base: string;
    active: KeepBoolean;
    borderPosition: BorderPosition;
}
export type TabStyleItem<Type> = {
    [K in keyof Type]: TabStyleItemProps;
};
export type TabItemStatus = 'active' | 'notActive';
export interface TabNotificationColors extends Pick<KeepColors, 'error' | 'gray' | 'info' | 'success' | 'warning'> {
    [key: string]: string;
}
/**
 * Props for the Tabs component.
 * @interface TabsProps
 * @extends {PropsWithChildren<Omit<ComponentProps<'div'>, 'style' | 'ref'>>}
 */
export interface TabsProps extends PropsWithChildren<Omit<ComponentProps<'div'>, 'style' | 'ref'>> {
    /**
     * The style of the tabs.
     * @type {keyof TabStyles}
     * @default 'default'
     */
    style?: keyof TabStyles;
    /**
     * The position of the icon relative to the tab label.
     * @type {'left' | 'right'}
     * @default 'left'
     */
    iconPosition?: 'left' | 'right';
    /**
     * The position of the tab border.
     * @type {'top' | 'bottom'}
     * @default 'bottom'
     */
    borderPosition?: 'top' | 'bottom';
    /**
     * Callback function triggered when the active tab changes.
     * @param activeTab - The index of the active tab.
     */
    onActiveTabChange?: (activeTab: number) => void;
}
export interface TabsRef {
    setActiveTab: (activeTab: number) => void;
}
export declare const Tabs: import("react").ForwardRefExoticComponent<TabsProps & import("react").RefAttributes<TabsRef>> & {
    Item: import("react").FC<TabItemProps>;
};
