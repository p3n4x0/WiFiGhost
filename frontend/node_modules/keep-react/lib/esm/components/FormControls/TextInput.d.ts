import React, { ComponentProps, ReactNode } from 'react';
import type { KeepBoolean, KeepColors, KeepSizes } from '../../Keep/KeepTheme';
export interface keepTextInputTheme {
    base: string;
    addon: {
        base: string;
        separator: {
            colors: TextInputColors;
        };
        position: {
            left: string;
            right: string;
        };
        addonBorder: {
            on: string;
            off: string;
        };
    };
    field: {
        base: string;
        icon: {
            base: string;
            position: {
                left: string;
                right: string;
            };
        };
        input: {
            base: string;
            disabled: string;
            sizes: TextInputSizes;
            colors: TextInputColors;
            withBorder: KeepBoolean;
            withBg: {
                on: {
                    colors: TextInputColors;
                };
                off: string;
            };
            withIcon: {
                on: {
                    left: string;
                    right: string;
                };
                off: string;
            };
            withAddon: {
                on: {
                    left: string;
                    right: string;
                };
                off: string;
            };
            withShadow: KeepBoolean;
        };
    };
}
export interface TextInputColors extends Pick<KeepColors, 'gray' | 'info' | 'error' | 'warning' | 'success'> {
    [key: string]: string;
}
export interface TextInputSizes extends Pick<KeepSizes, 'sm' | 'md' | 'lg'> {
    [key: string]: string;
}
/**
 * Props for the TextInput component.
 * @interface TextInputProps
 * @extends {Omit<ComponentProps<'input'>, 'ref' | 'color' | 'className'>}
 */
export interface TextInputProps extends Omit<ComponentProps<'input'>, 'ref' | 'color' | 'className'> {
    /**
     * The sizing option for the TextInput.
     * @type {keyof TextInputSizes}
     * @default 'md'
     */
    sizing?: keyof TextInputSizes;
    /**
     * Determines whether the TextInput has a background color.
     * @type {boolean}
     * @default false
     */
    withBg?: boolean;
    /**
     * Determines whether the TextInput has a border.
     * @type {boolean}
     * @default true
     */
    border?: boolean;
    /**
     * Determines whether the TextInput has a shadow.
     * @type {boolean}
     * @default false
     */
    shadow?: boolean;
    /**
     * Determines whether the TextInput is disabled.
     * @type {boolean}
     * @default false
     */
    disabled?: boolean;
    /**
     * The helper text to display below the TextInput.
     * @type {ReactNode}
     * @default null
     */
    helperText?: ReactNode;
    /**
     * The addon content to display alongside the TextInput.
     * @type {ReactNode}
     * @default null
     */
    addon?: ReactNode;
    /**
     * The position of the addon content relative to the TextInput.
     * @type {'left' | 'right'}
     * @default 'left'
     */
    addonPosition?: 'left' | 'right';
    /**
     * The icon to display alongside the TextInput.
     * @type {ReactNode}
     * @default null
     */
    icon?: ReactNode;
    /**
     * The position of the icon relative to the TextInput.
     * @type {'left' | 'right'}
     * @default 'right'
     */
    iconPosition?: 'left' | 'right';
    /**
     * The color variant for the TextInput.
     * @type {keyof TextInputColors}
     * @default 'default'
     */
    color?: keyof TextInputColors;
    /**
     * The value of the TextInput.
     * @type {string}
     * @default ''
     */
    value?: string;
    /**
     * The event handler for the onChange event of the TextInput.
     * @type {(e: React.ChangeEvent<HTMLInputElement>) => void}
     * @default null
     */
    handleOnChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;
    /**
     * The CSS class name for the TextInput.
     * @type {string}
     * @default ''
     */
    className?: string;
    /**
     * The CSS style for the addon content.
     * @type {string}
     * @default ''
     */
    addonStyle?: string;
    /**
     * The CSS style for the icon.
     * @type {string}
     * @default ''
     */
    iconStyle?: string;
}
export declare const TextInput: React.ForwardRefExoticComponent<TextInputProps & React.RefAttributes<HTMLInputElement>>;
