import type { ComponentProps, ReactNode } from 'react';
import type { KeepSizes } from '../../Keep/KeepTheme';
export interface keepNumberInputTheme {
    base: string;
    field: {
        base: string;
        icon: {
            base: string;
            incrementIcon: string;
            decrementIcon: string;
            disabled: string;
            sizes: NumberInputSizes;
            position: {
                right: string;
                incrementIcon: string;
                decrementIcon: string;
            };
        };
        input: {
            base: string;
            disabled: string;
            sizes: NumberInputSizes;
            withIcon: {
                on: {
                    left: string;
                    right: string;
                };
                off: string;
            };
        };
    };
}
export interface NumberInputSizes extends Pick<KeepSizes, 'sm' | 'md' | 'lg'> {
    [key: string]: string;
}
/**
 * Props for the NumberInput component.
 * @interface NumberInputProps
 * @extends {Omit<ComponentProps<'input'>, 'ref' | 'color' | 'className'>}
 */
export interface NumberInputProps extends Omit<ComponentProps<'input'>, 'ref' | 'color' | 'className'> {
    /**
     * The value of the input.
     * @type {number}
     * @default 0
     */
    value: number;
    /**
     * The size of the input.
     * @type {keyof NumberInputSizes}
     * @default 'md'
     */
    sizing?: keyof NumberInputSizes;
    /**
     * Specifies whether the input is disabled.
     * @type {boolean}
     * @default false
     */
    disabled?: boolean;
    /**
     * The helper text of the input.
     * @type {ReactNode}
     * @default ''
     */
    helperText?: ReactNode;
    /**
     * The label of the input.
     * @type {ReactNode}
     * @default ''
     */
    icon?: ReactNode;
    /**
     * The position of the icon.
     * @type {'left' | 'right'}
     * @default 'right'
     */
    iconPosition?: 'right';
    /**
     * Callback function to handle input value changes.
     * @param value - The new value of the input.
     * @returns {void}
     * @default () => {}
     */
    setValue: React.Dispatch<React.SetStateAction<number>>;
}
export declare const NumberInput: import("react").ForwardRefExoticComponent<NumberInputProps & import("react").RefAttributes<HTMLInputElement>>;
