import { ComponentProps, FC, PropsWithChildren, ReactNode } from 'react';
export interface keepAlertTheme {
    base: string;
    container: string;
    dismiss: string;
    rounded: string;
    border: string;
    disMissButton: {
        base: string;
        color: {
            primary: string;
            success: string;
            warning: string;
            error: string;
            metal: string;
        };
    };
    borderColor: {
        primary: string;
        success: string;
        warning: string;
        error: string;
        metal: string;
    };
    borderAccent: {
        left: string;
        right: string;
        top: string;
        bottom: string;
    };
    color: {
        primary: string;
        success: string;
        warning: string;
        error: string;
        metal: string;
    };
    icon: {
        primary: string;
        success: string;
        warning: string;
        error: string;
        metal: string;
    };
    title: {
        base: string;
        color: {
            primary: string;
            success: string;
            warning: string;
            error: string;
            metal: string;
        };
    };
    description: string;
}
interface AlertProps extends PropsWithChildren<Omit<ComponentProps<'div'>, 'color'>> {
    color?: 'primary' | 'success' | 'warning' | 'error' | 'metal';
    icon?: ReactNode;
    dismiss?: boolean;
    onDismiss?: boolean | (() => void);
    rounded?: boolean;
    withBorder?: boolean;
    withBorderAccent?: boolean;
    withBorderAccentPosition?: 'left' | 'right' | 'top' | 'bottom';
    children?: ReactNode;
    className?: string;
    BtnStyle?: string;
    [key: string]: any;
}
export declare const Alert: FC<AlertProps> & {
    Title: FC<import("./Title").TitleProps>;
    Description: FC<import("./Description").DescriptionProps>;
    Container: FC<import("./Container").ContainerProps>;
    Icon: FC<import("./Icon").IconProps>;
    Body: FC<import("./Body").BodyProps>;
};
export {};
