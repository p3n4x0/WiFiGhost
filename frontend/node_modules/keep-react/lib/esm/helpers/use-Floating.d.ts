import type { ElementProps, Placement, ReferenceType, UseRoleProps } from '@floating-ui/react';
import { useFloating } from '@floating-ui/react';
import type { Dispatch, RefObject, SetStateAction } from 'react';
/**
 * Defines the parameters for the useFloating hook.
 * @typedef {Object} UseBaseFloatingParams
 * @property {('auto' | Placement)} [placement='auto'] - The placement of the floating element.
 * @property {boolean} open - Whether the floating element is open or not.
 * @property {React.RefObject<HTMLDivElement>} [arrowRef] - The ref object for the arrow element.
 * @property {React.Dispatch<React.SetStateAction<boolean>>} setOpen - The function to set the open state of the floating element.
 */
export type UseBaseFloatingParams = {
    placement?: 'auto' | Placement;
    open: boolean;
    arrowRef?: RefObject<HTMLDivElement>;
    setOpen: Dispatch<SetStateAction<boolean>>;
};
/**
 * A hook that provides base floating functionality.
 * @template Type - The type of the reference element.
 * @param {UseBaseFloatingParams<Type>} params - The parameters for the hook.
 * @returns {UseFloatingReturnType<Type>} - The return type of the hook.
 */
export declare const useBaseFLoating: <Type extends ReferenceType>({ open, arrowRef, placement, setOpen, }: UseBaseFloatingParams) => {
    placement: Placement;
    strategy: import("@floating-ui/utils").Strategy;
    middlewareData: import("@floating-ui/core").MiddlewareData;
    x: number;
    y: number;
    isPositioned: boolean;
    update: () => void;
    floatingStyles: import("react").CSSProperties;
    refs: {
        reference: import("react").MutableRefObject<import("@floating-ui/react-dom").ReferenceType | null>;
        floating: import("react").MutableRefObject<HTMLElement | null>;
        setReference: (node: import("@floating-ui/react-dom").ReferenceType | null) => void;
        setFloating: (node: HTMLElement | null) => void;
    } & import("@floating-ui/react").ExtendedRefs<Type>;
    elements: {
        reference: import("@floating-ui/react-dom").ReferenceType | null;
        floating: HTMLElement | null;
    } & import("@floating-ui/react").ExtendedElements<Type>;
    context: {
        x: number;
        y: number;
        placement: Placement;
        strategy: import("@floating-ui/utils").Strategy;
        middlewareData: import("@floating-ui/core").MiddlewareData;
        isPositioned: boolean;
        update: () => void;
        floatingStyles: import("react").CSSProperties;
        open: boolean;
        onOpenChange: (open: boolean, event?: Event | undefined) => void;
        events: import("@floating-ui/react").FloatingEvents;
        dataRef: import("react").MutableRefObject<import("@floating-ui/react").ContextData>;
        nodeId: string | undefined;
        floatingId: string;
        refs: import("@floating-ui/react").ExtendedRefs<Type>;
        elements: import("@floating-ui/react").ExtendedElements<Type>;
    };
};
/**
 * Defines the parameters for the useFloating interactions.
 * @typedef {Object} UseFloatingInteractionsParams
 * @property {ReturnType<typeof useFloating>['context']} context - The context of the useFloating hook.
 * @property {'hover' | 'click'} [trigger] - The trigger type for the interaction.
 * @property {UseRoleProps['role']} [role] - The role of the element.
 * @property {ElementProps[]} [interactions] - The list of element properties for the interaction.
 */
export type UseFloatingInteractionsParams = {
    context: ReturnType<typeof useFloating>['context'];
    trigger?: 'hover' | 'click';
    role?: UseRoleProps['role'];
    interactions?: ElementProps[];
};
/**
 * A hook that provides floating interactions for a given context element.
 * @param context - The context element to attach the interactions to.
 * @param trigger - The trigger for the interactions. Can be either 'click' or 'hover'.
 * @param role - The ARIA role for the context element. Defaults to 'tooltip'.
 * @param interactions - Additional interactions to be added to the context element.
 * @returns An array of interaction hooks.
 */
export declare const useFloatingInteractions: ({ context, trigger, role, interactions, }: UseFloatingInteractionsParams) => {
    getReferenceProps: (userProps?: import("react").HTMLProps<Element> | undefined) => Record<string, unknown>;
    getFloatingProps: (userProps?: import("react").HTMLProps<HTMLElement> | undefined) => Record<string, unknown>;
    getItemProps: (userProps?: import("react").HTMLProps<HTMLElement> | undefined) => Record<string, unknown>;
};
